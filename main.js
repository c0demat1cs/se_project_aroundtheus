!function(){"use strict";class e{constructor(e,t,s,r,i,n){let{name:o,link:l,_id:a,isLiked:c}=e;this._name=o,this._link=l,this._id=a,this._isLiked=c,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLikeClick=i,this._handleUnlikeClick=n}getId(){return this._id}getIsLiked(){return this._isLiked}_getElement(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this._getElement(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardTitleEl.textContent=this._name,this._setEventListeners(),this._setLikeState(),this._cardElement}_setLikeState(){!0===this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_handleLikeIcon=()=>{this._likeButton.classList.toggle("card__like-button_active")};_setEventListeners(){this._likeButton.addEventListener("click",(()=>{!0===this._isLiked?this._handleUnlikeClick(this):this._handleLikeClick(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}deleteCard=()=>{this._cardElement.remove(),this._cardElement=null}}class t{constructor(e,t){this._formElement=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputElements=this._formElement.querySelectorAll(this._inputSelector),this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return Array.from(this._inputElements).some((e=>!e.validity.valid))}_disableButton(){this._submitButton&&(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_enableButton(){this._submitButton&&(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputElements.forEach((e=>{this._checkInputValidity(e)})),this._toggleButtonState()}disableSubmitButton(){this._disableButton()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleKeyDown=this._handleKeyDown.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleKeyDown)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleKeyDown)}_handleKeyDown(e){"Escape"===e.key&&this.close()}setEventListeners(){const e=this._popupElement.querySelector(".modal__close");e&&e.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}var i=class extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputFields=this._popupForm.querySelectorAll(".modal__input"),this._formSubmitHandler=this._formSubmitHandler.bind(this)}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._formSubmitHandler)}_formSubmitHandler(e){e.preventDefault(),this._handleFormSubmit(this._getInputValues())}close(){this._popupForm.reset(),super.close()}};const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=(document.querySelector(".cards__list"),document.querySelector("#profile-edit-modal"),document.querySelector("#add-card-modal"),document.querySelector(".modal__image"),document.querySelector(".modal__popup-caption"),document.querySelector("#profile-add-button")),l=document.querySelector("#profile-edit-button"),a=document.querySelector(".profile__image"),c=document.querySelector(".profile__edit-icon"),d=(document.querySelector("#card-title-input"),document.querySelector("#card-link-input"),document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector("#profile-title-input")),u=document.querySelector("#profile-description-input");document.forms["profile-form"],document.forms["card-form"];const h=new t(n,document.querySelector("#profile-form"));h.enableValidation();const _=new t(n,document.querySelector("#add-card-form"));_.enableValidation();const m=new t(n,document.querySelector("#avatar-form"));m.enableValidation();const p=new i("#add-card-modal",(e=>{var t,r;t=e.title,r=e.link,S.addNewCard({name:t,link:r}).then((e=>{!function(e){const t=y(e);new s({},"#cards__list").addItem(t)}(e),_.disableSubmitButton(),p.close()})).catch((e=>{console.error(e)}))}));p.setEventListeners();const E=new i("#profile-edit-modal",(function(e){let{title:t,description:s}=e;S.editProfileInfo({name:t,about:s}).then((e=>{k.setUserInfo(e.name,e.about),h.disableSubmitButton(),E.close()})).catch((e=>{console.error(e)}))}));E.setEventListeners();const f=new class extends r{constructor(e){super({popupSelector:e}),this._popupCaption=this._popupElement.querySelector(".modal__popup-caption"),this._imageElement=this._popupElement.querySelector(".modal__image")}open(e){let{link:t,name:s}=e;this._popupCaption.textContent=s,this._imageElement.src=t,this._imageElement.alt=`Image of ${s}`,super.open()}}("#image-modal");f.setEventListeners();const v=new class extends r{constructor(e){super({popupSelector:e})}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()}))}setSubmitCallback(e){this._handleSubmit=e}}("#delete-card-modal",C);v.setEventListeners();const b=new i("#avatar-modal",(function(){const e=document.querySelector("#avatar-link-input").value;S.updateAvatar({avatar:e}).then((e=>{a.src=e.avatar,m.disableSubmitButton(),b.close()})).catch((e=>{console.error(e)}))}));b.setEventListeners();const k=new class{constructor(e,t,s){this._profileTitleElement=document.querySelector(e),this._profileDescriptionElement=document.querySelector(t),this._profileAvatarElement=document.querySelector(s)}getUserInfo(){return{title:this._profileTitleElement.textContent,description:this._profileDescriptionElement.textContent}}setUserInfo(e,t){this._profileTitleElement.textContent=e,this._profileDescriptionElement.textContent=t}setAvatar(e){this._profileAvatarElement.src=e}}(".profile__title",".profile__description",".profile__image"),S=new class{constructor(e){this.baseUrl=e.baseUrl,this.headers=e.headers}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editProfileInfo(e){let{name:t,about:s}=e;return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then((e=>e.ok?Promise.resolve("Card deleted"):Promise.reject(`Error: ${e.status}`)))}likeCard(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateAvatar(e){let{avatar:t}=e;return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d918969b-47fa-4f72-8138-61be6ab55840","Content-Type":"application/json"}});function y(t){return new e(t,"#card-template",L,C,g,I).getView()}function L(e){let{name:t,link:s}=e;f.open({link:s,name:t})}function C(e){v.open(),v.setSubmitCallback((()=>{S.deleteCard(e.getId()).then((()=>{e.deleteCard(),v.close()})).catch((e=>{console.error(e)}))}))}function g(e){S.likeCard(e._id).then((t=>{e._handleLikeIcon(),e._isLiked=!0,console.log("Card liked:",t)})).catch((e=>{console.error(e)}))}function I(e){S.removeLike(e._id).then((t=>{e._handleLikeIcon(),e._isLiked=!1,console.log("Card disliked:",t)})).catch((e=>{console.log(e)}))}S.getInitialCards().then((e=>{new s({items:e.reverse(),renderer:y},"#cards__list").renderItems(e)})).catch((e=>{console.error(e)})),S.getUserInfo().then((e=>{k.setUserInfo(e.name,e.about),k.setAvatar(e.avatar)})).catch((e=>{console.error(e)})),l.addEventListener("click",(()=>{const e=k.getUserInfo();d.value=e.title,u.value=e.description,h.resetValidation(),E.open()})),o.addEventListener("click",(()=>{p.open()})),c.addEventListener("click",(()=>{b.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,